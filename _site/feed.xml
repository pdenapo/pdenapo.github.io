<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algunos Bytes Personales</title>
    <description>A blog by Pablo De Nápoli on free software and programming.
</description>
    <link>http://pdenapo.github.io/</link>
    <atom:link href="http://pdenapo.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 02 Oct 2016 23:59:31 +0000</pubDate>
    <lastBuildDate>Sun, 02 Oct 2016 23:59:31 +0000</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Creating a Chroot</title>
        <description>&lt;p&gt;In this site, I’m using &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. I wanted to test 
Jekyll on a host running Ubuntu 14.04 LTS, but the version of Jekyll in 
that distribution is rather old (0.11.2-1 when current version is 3.2.1).
However, I didn’t want to upgrade the hole system just because of that, so I
remember an old useful trick, that it is very useful in situations like this: 
creating a chroot. I learnt about it while
&lt;a href=&quot;https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Base&quot;&gt;installing Gentoo&lt;/a&gt;
(a source-based GNU/Linux distribution).&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Chroot&quot;&gt;chroot&lt;/a&gt; on Unix operating systems is an operation that changes the apparent 
root directory for the current running process and its children. 
A program that is run in such a modified environment cannot name (and therefore 
normally cannot access) files outside the designated directory tree.&lt;/p&gt;

&lt;p&gt;You can install a completly different version of GNU/Linux inside the chroot.
&lt;a href=&quot;https://wiki.debian.org/chroot&quot;&gt;Here&lt;/a&gt; you can find some useful
documentation on how to do that. In particular, you can use
[debootstrap][https://www.debian.org/releases/stable/amd64/apds03.html.en]
for installing a Debian system (or its derivatives like Ubuntu) inside
another. For instance, I have used debootstrap for installing  Ubuntu 
Xenial Xerus (16.04) instance (which provides the updated jekyll package
that I needed) inside my Ubuntu 14.04 system, by running&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;debootstrap xenial /xenial-root&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You need to mount several pseudo filesystems before entering into the 
the chrooted enviroment.using the command chroot. I am using the following
script for doing that.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh -v&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Script to enter into the xenial chroot&lt;/span&gt;
mount proc xenial-root/proc -t proc
mount sysfs xenial-root/sys -t sysfs
mount --bind /dev/pts /xenial-root/dev/pts
cp /etc/hosts xenial-root/etc/hosts
chroot xenial-root /bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that a chroot has several security limitations (see the &lt;a href=&quot;https://en.wikipedia.org/wiki/Chroot&quot;&gt;Wikipedia page
for chroot&lt;/a&gt;. If you need something
more secure, there are other options like using
&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; or using a virtual machine (with
&lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;Virtualbox&lt;/a&gt; or
&lt;a href=&quot;http://wiki.qemu.org/Main_Page&quot;&gt;Quemu&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 25 Sep 2016 00:09:32 +0000</pubDate>
        <link>http://pdenapo.github.io/gnu/linux/tricks/2016/09/25/creating_a_chroot.html</link>
        <guid isPermaLink="true">http://pdenapo.github.io/gnu/linux/tricks/2016/09/25/creating_a_chroot.html</guid>
        
        
        <category>GNU/Linux</category>
        
        <category>tricks</category>
        
      </item>
    
      <item>
        <title>Building ReactOS under GNU/Linux</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.reactos.org/&quot;&gt;React OS&lt;/a&gt; is a free-software/open source clone of MS-Windows, in active development. I am a free software advocate, so I want to help to test it, even though I am a GNU/Linux user/programmer, and I know nothing about the MS-Windows internals… In this blog, I will share some experiences about it, so you can also join the React OS testing/development.&lt;/p&gt;

&lt;p&gt;My first step was to build React OS from the sources. In order to do so, the first thing that you need to do is to build your React OS build environment, which provides versions of binutils/gcc etc. specially prepared for cross-compiling React OS under GNU/Linux.&lt;/p&gt;

&lt;p&gt;1) Create a directory to work in. For example&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir reactos-work

&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;reactos-work&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;2) Get the current version of the React OS build environment from the React OS page at sourceforge, for example&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://sourceforge.net/projects/reactos/files/RosBE-Unix/2.1.2/RosBE-Unix-2.1.2.tar.bz2/&quot;&gt;http://sourceforge.net/projects/reactos/files/RosBE-Unix/2.1.2/RosBE-Unix-2.1.2.tar.bz2/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and extract it to your working directory, with the order&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;tar xvf RosBE-Unix-2.1.1.tar.bz2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;3) Run the script RosBE-builder.sh telling it where do you want to create your React OS build environment.  Even tough the script recommends that you run it as root, don’t do it! It is not really need it, and its always a bad idea to run something as root when it is not the case.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./RosBE-Builder.sh /home/user/reactos-work/RosBE&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;(change here /home/user/reactos-work by the path where you have installed
RosBE !)&lt;/p&gt;

&lt;p&gt;It will check for the necessary dependencies (bison, flex, gcc,g++, grep, makeinfo and GNU make), 
Should any of them be missing, install it.If something goes wrong, the script will tell you and you might want to check the 
build log. In that case, report it in Reactos
&lt;a href=&quot;http://jira.reactos.org/&quot;&gt;Jira&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;4) Ok, if everything went fine, now you are ready to build React OS from the sources.To enter the React OS build environment, run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/home/user/reactos-work/reactos-work/RosBE/RosBE.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should see something like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;*******************************************************************************&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;         ReactOS Build Environment &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Unix-based Operating Systems          &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;                      by Colin Finck &amp;lt;colin@reactos.org&amp;gt;                     &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;                                                                             &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;                                 Version 2.1.2                               &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;*******************************************************************************&lt;/span&gt;


For a list of all included commands, &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;help&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;5) Now get the current version of the sources using subversion. Use&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;svn checkout svn://svn.reactos.org/reactos/trunk/reactos&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;if you just want the main React OS source code, o&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;svn checkout svn://svn.reactos.org/reactos/trunk/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;if you want some extra stuff (documentation,rostests, wallpapers, etc.)&lt;/p&gt;

&lt;p&gt;React OS is currently using cmake and ninja (which are provided in the React OS development environment) for the building process.&lt;/p&gt;

&lt;p&gt;6) Finally, create a directory rosbuild for your build, and run the configure 
script from the top of the source tree:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir rosbuild

&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;rosbuild

../reactos/configure.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, run ninja bootcd inside the rosbuild directory for creating the boot cd for React OS.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ninja bootcd&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will create a file named bootcd.iso in the top of the source tree, wich is the iso image of the boot cd. Alternatively you can use the command “ninja livecd” for creating the live cd.&lt;/p&gt;

&lt;p&gt;When you test React OS, it is useful to make a clean build of the current sources. You may want therefore to automate this process using a shell script like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash -v&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DONDE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/user/reactos-work
rm --recursive --force rosbuild
mkdir rosbuild
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$DONDE&lt;/span&gt;/rosbuild
&lt;span class=&quot;nv&quot;&gt;$DONDE&lt;/span&gt;/trunk/reactos/configure.sh
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$DONDE&lt;/span&gt;/rosbuild/host-tools
ninja all
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$DONDE&lt;/span&gt;/rosbuild/reactos
ninja bootcd&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Also it is useful to tag the boot cd image, with the number of the current revision (since when doing testing you will end up with many different iso images!). I am using a python script for doing that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python2&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;subprocess&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;svnversion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/home/user/reactos-work/reactos&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PIPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&#39;(|&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d+M?S?):?(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d+)(M?)S?&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;new_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bootcd-mine-&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.iso&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_name&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/home/user/reactos-work/rosbuild/reactos/bootcd.iso&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/home/user/reactos-work/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sun, 25 Sep 2016 00:09:32 +0000</pubDate>
        <link>http://pdenapo.github.io/react/os/2016/09/25/building_reactos_under_gnu_linux.html</link>
        <guid isPermaLink="true">http://pdenapo.github.io/react/os/2016/09/25/building_reactos_under_gnu_linux.html</guid>
        
        
        <category>React</category>
        
        <category>OS</category>
        
      </item>
    
  </channel>
</rss>
